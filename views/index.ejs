<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Nodejs</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
      /* Custom toast styles */
      .toast {
        background-color: #28a745; /* Green background */
        color: #fff; /* White text */
      }
      .toast-body {
        color: #fff; /* Ensure text is readable */
      }
      .table-container {
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
      <div class="row">
        <div class="col-md-12">
          <h1 class="text-center mb-4 fs-4">TO DO</h1>
          <form id="todoForm" action="/addTodo" method="POST" class="bg-light p-4 rounded shadow">
            <div class="mb-3 row">
              <div class="col-sm-4">
                <label for="pro_name" class="form-label">Product Name:</label>
              </div>
              <div class="col-sm-8">
                <input type="text" id="pro_name" name="pro_name" class="form-control" required>
              </div>
            </div>
  
            <div class="mb-3 row">
              <div class="col-sm-4">
                <label for="pro_type" class="form-label">Product Type:</label>
              </div>
              <div class="col-sm-8">
                <input type="text" id="pro_type" name="pro_type" class="form-control" required>
              </div>
            </div>
            
            <div class="text-end">
              <button type="submit" class="btn btn-primary btn-sm">Save</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Display Table -->
    <div class="container table-container">
      <h2 class="text-center mb-4">Records</h2>
      <table class="table table-striped">
        <thead>
          <tr>
            <th scope="col">ID</th>
            <th scope="col">Product Name</th>
            <th scope="col">Product Type</th>
          </tr>
        </thead>
        <tbody id="recordsTableBody">
          <!-- All Records will be inserted here dynamically -->
        </tbody>
      </table>
    </div>

    <!-- Toast Component -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
      <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <strong class="me-auto">Notification</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          Data saved successfully!
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
      // Function to show toast
      function showToast(message) {
        const toast = document.getElementById('toast');
        toast.querySelector('.toast-body').textContent = message;
        const toastInstance = new bootstrap.Toast(toast);
        toastInstance.show();
      }

      // Function to update the table with new records
      function updateTable(records) {
        const tableBody = document.getElementById('recordsTableBody');
        tableBody.innerHTML = ''; // Clear existing rows
        records.forEach(record => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${record.id}</td>
            <td>${record.pro_name}</td>
            <td>${record.pro_type}</td>
          `;
          tableBody.appendChild(row);
        });
      }

      // Fetch records when the page loads
      window.addEventListener('load', async () => {
        try {
          const response = await fetch('/getRecords');
          const records = await response.json();
          updateTable(records);
        } catch (error) {
          console.error('Error fetching records:', error);
        }
      });

      // Add an event listener for the form submission
      document.getElementById('todoForm').addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent the default form submission

        const formData = new FormData(event.target);
        const data = new URLSearchParams(formData).toString();

        try {
          const response = await fetch(event.target.action, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: data
          });

          if (response.ok) {
            showToast('Data saved successfully!');
            event.target.reset(); // Optionally, reset the form fields
            
            // Fetch updated records from the server
            const recordsResponse = await fetch('/getRecords');
            const records = await recordsResponse.json();
            updateTable(records); // Update the table with the new records
          } else {
            showToast('Failed to save data.');
          }
        } catch (error) {
          showToast('An error occurred.');
        }
      });
    </script>
  </body>
</html>
